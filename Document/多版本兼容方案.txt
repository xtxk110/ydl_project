@api 多版本兼容思路
	一般新版本带来的改动主要是这三种: 全新功能, 老功能改造, 老功能bug修复 , 这三种的兼容思路如下:
	#全新功能 : 这种功能对之前的api 版本用户无影响. 不用考虑
	#老功能改造 : 此改动比较大, 一般copy以前的版本,改一个新版本出来(以前的接口不删除) , 这样 新老都兼容
	#老功能bug修复: 如果此bug不影响输入输出参数, 一般直接在原来接口改即可, 否则copy建立新版本

	数据库层兼容思路: 字段只增不删除, 并给默认值, 存储过程跟随接口改动而改动, 需要建立新版本的就建立新版本存储过程

	注意点: 
	大改动, 数据库结构和api都不兼容, 强制升级
	如果只需新增接口参数，可以加默认值来兼容旧版本。

@api 多版本兼容实践
	根据上面的兼容思路,下面举例说明如何实现
	以getUser 接口为例, 接口命名规范为 getUser_版本号 
	服务器端:
			服务器端经过两次修改后, 产生如下三个接口
			getUser_179 (这是原始版本,在179版本第一开发产生),
			getUser_180 (180版本需求变更改了一次,产生了180版本),
			getUser_186 (隔了6个版本后,getUser再一次大修改, 产生 getUser_186 版本接口)
			以上三个接口, 服务器端同时存在.
	客服端:
			客服端调用方式为: 直接调用服务器端带版本号的接口即可,比如 getUser_180 
			客服端调用模拟
			179版本客服端调用的是 : getUser_179  
			180版本客服端调用的是 : getUser_180   
			181版本客服端调用的是 : getUser_180 (因为没需求变动客服端调用代码不变,所以依旧调用的是180)  
			182版本客服端调用的是 : getUser_180  (因为没需求变动客服端调用代码不变,所以依旧调用的是180)  
			183版本客服端调用的是 : getUser_180  (因为没需求变动客服端调用代码不变,所以依旧调用的是180)  
			184版本客服端调用的是 : getUser_180  (因为没需求变动客服端调用代码不变,所以依旧调用的是180)  
			185版本客服端调用的是 : getUser_180  (因为没需求变动客服端调用代码不变,所以依旧调用的是180)  
			186版本客服端调用的是 : getUser_186  (需求改变 , 客服端调用代码跟着改,调用的是最新186)  
			这样用户安装的 179-186的所有版本都可以同时使用, 不必跟着强制升级.
@最后: 
当出现一次强制升级后, 服务器端需要删除以前的老接口代码, 客服端无需做任何操作
